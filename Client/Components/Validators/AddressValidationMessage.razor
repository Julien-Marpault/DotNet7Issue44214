@using System.Linq.Expressions
@using System.Reflection

@typeparam TValue
@implements IDisposable

@foreach (var message in EditContext.GetValidationMessages(_fieldIdentifier))
{
    <div class="@Class">
        @message
    </div>
}

@code {
    [CascadingParameter] private EditContext EditContext { get; set; }

    [Parameter] public Expression<Func<TValue>> For { get; set; }
    [Parameter] public string Class { get; set; }

    private FieldIdentifier _fieldIdentifier;

    protected override void OnInitialized()
    {
        EditContext.OnValidationStateChanged += HandleValidationStateChanged;
        var lambdaBody = (MemberExpression)For.Body;
        var name = ((PropertyInfo)lambdaBody.Member).Name;
        _fieldIdentifier = EditContext.Field(name);
    }

    private void HandleValidationStateChanged(object o, ValidationStateChangedEventArgs args) => StateHasChanged();

    public void Dispose()
    {
        EditContext.OnValidationStateChanged -= HandleValidationStateChanged;
    }
}